//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Api.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Bulletins> Bulletins { get; set; }
        public virtual DbSet<GED> GED { get; set; }
        public virtual DbSet<Lists> Lists { get; set; }
        public virtual DbSet<Loghi> Loghi { get; set; }
        public virtual DbSet<Logs> Logs { get; set; }
        public virtual DbSet<Names> Names { get; set; }
        public virtual DbSet<NamesLists> NamesLists { get; set; }
        public virtual DbSet<Notifications> Notifications { get; set; }
        public virtual DbSet<operationFeatures> operationFeatures { get; set; }
        public virtual DbSet<Operations> Operations { get; set; }
        public virtual DbSet<Property> Property { get; set; }
        public virtual DbSet<Senders> Senders { get; set; }
        public virtual DbSet<SendersUsers> SendersUsers { get; set; }
        public virtual DbSet<TemporaryValidateTable> TemporaryValidateTable { get; set; }
        public virtual DbSet<UserPermits> UserPermits { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<VisureDocumentType> VisureDocumentType { get; set; }
        public virtual DbSet<SelectItemFromProducts> SelectItemFromProducts { get; set; }
    
        public virtual int DisplayCounters(string sqlCommand)
        {
            var sqlCommandParameter = sqlCommand != null ?
                new ObjectParameter("sqlCommand", sqlCommand) :
                new ObjectParameter("sqlCommand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DisplayCounters", sqlCommandParameter);
        }
    
        public virtual int GetCount(string sqlCommand)
        {
            var sqlCommandParameter = sqlCommand != null ?
                new ObjectParameter("sqlCommand", sqlCommand) :
                new ObjectParameter("sqlCommand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCount", sqlCommandParameter);
        }
    
        public virtual ObjectResult<GetExportableData_Result> GetExportableData(Nullable<System.DateTime> startdate, Nullable<System.DateTime> enddate, string userId)
        {
            var startdateParameter = startdate.HasValue ?
                new ObjectParameter("startdate", startdate) :
                new ObjectParameter("startdate", typeof(System.DateTime));
    
            var enddateParameter = enddate.HasValue ?
                new ObjectParameter("enddate", enddate) :
                new ObjectParameter("enddate", typeof(System.DateTime));
    
            var userIdParameter = userId != null ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExportableData_Result>("GetExportableData", startdateParameter, enddateParameter, userIdParameter);
        }
    
        public virtual ObjectResult<GetGrapiquePartner_Result> GetGrapiquePartner(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> id)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetGrapiquePartner_Result>("GetGrapiquePartner", startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual ObjectResult<GetNamess_Result> GetNamess()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetNamess_Result>("GetNamess");
        }
    
        public virtual int GetPrice(string sqlCommand)
        {
            var sqlCommandParameter = sqlCommand != null ?
                new ObjectParameter("sqlCommand", sqlCommand) :
                new ObjectParameter("sqlCommand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetPrice", sqlCommandParameter);
        }
    
        public virtual int GetReportSpedizioni(string sqlCommand)
        {
            var sqlCommandParameter = sqlCommand != null ?
                new ObjectParameter("sqlCommand", sqlCommand) :
                new ObjectParameter("sqlCommand", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetReportSpedizioni", sqlCommandParameter);
        }
    
        public virtual ObjectResult<GetSale_Result> GetSale(Nullable<System.DateTime> startDate, Nullable<System.DateTime> endDate, Nullable<int> id)
        {
            var startDateParameter = startDate.HasValue ?
                new ObjectParameter("startDate", startDate) :
                new ObjectParameter("startDate", typeof(System.DateTime));
    
            var endDateParameter = endDate.HasValue ?
                new ObjectParameter("endDate", endDate) :
                new ObjectParameter("endDate", typeof(System.DateTime));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSale_Result>("GetSale", startDateParameter, endDateParameter, idParameter);
        }
    
        public virtual int LockNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LockNames");
        }
    
        public virtual int LockNamesOther()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("LockNamesOther");
        }
    
        public virtual ObjectResult<LockNamesParameters_Result> LockNamesParameters(Nullable<int> operationType, Nullable<int> currentState, Nullable<int> qtaTop, Nullable<bool> valid)
        {
            var operationTypeParameter = operationType.HasValue ?
                new ObjectParameter("operationType", operationType) :
                new ObjectParameter("operationType", typeof(int));
    
            var currentStateParameter = currentState.HasValue ?
                new ObjectParameter("currentState", currentState) :
                new ObjectParameter("currentState", typeof(int));
    
            var qtaTopParameter = qtaTop.HasValue ?
                new ObjectParameter("qtaTop", qtaTop) :
                new ObjectParameter("qtaTop", typeof(int));
    
            var validParameter = valid.HasValue ?
                new ObjectParameter("valid", valid) :
                new ObjectParameter("valid", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<LockNamesParameters_Result>("LockNamesParameters", operationTypeParameter, currentStateParameter, qtaTopParameter, validParameter);
        }
    
        public virtual int UnLockNames(Nullable<System.Guid> reSendGuid)
        {
            var reSendGuidParameter = reSendGuid.HasValue ?
                new ObjectParameter("reSendGuid", reSendGuid) :
                new ObjectParameter("reSendGuid", typeof(System.Guid));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UnLockNames", reSendGuidParameter);
        }
    }
}
